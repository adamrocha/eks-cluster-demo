name: EKS Cluster Demo CI

concurrency:
  group: terraform-${{ github.ref_name }}
  cancel-in-progress: true

on:
  push:
    branches: [ test, actions ]
  pull_request:
    branches: [ actions ]
  delete:

permissions:
  contents: read
  pull-requests: write

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: eks-demo-cluster
  AWS_ACCOUNT_ID: "802645170184"
  REPO: "hello-world-demo"
  IMAGE_TAG: "1.2.4"
  S3_BUCKET: "my-terraform-state"
  DYNAMO_TABLE: "terraform-locks"

jobs:
  terraform:
    name: Terraform EKS
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '2.1.0'

      - name: Install dependencies
        run: poetry install --no-root

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.1'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Health check AWS credentials
        run: aws sts get-caller-identity

      - name: Prepare backend (S3 + DynamoDB)
        run: ../make terraform tf-backend

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color | tee plan.txt

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: terraform/plan.txt

      - name: Comment PR with plan
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan
          path: terraform/plan.txt

      - name: Terraform Apply
        if: github.ref == 'refs/heads/test' || github.ref == 'refs/heads/actions'
        run: terraform apply -auto-approve -input=false

  deploy:
    name: Update Deployment
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update EKS Deployment with New Image
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
          IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:$IMAGE_TAG"
          kubectl set image deployment/hello-world -n hello-world-ns hello-world=$IMAGE_URI

      - name: Verify Kubernetes rollout
        run: |
          set -e
          if ! kubectl rollout status deployment/hello-world -n hello-world-ns --timeout=120s; then
            echo "Rollout failed, rolling back..."
            kubectl rollout undo deployment/hello-world -n hello-world-ns
            echo "::error::Rollback complete. Deployment did not succeed."
            exit 1
          fi
          echo "Rollout succeeded!"

  destroy:
    name: Terraform Destroy on Feature Branch Delete
    runs-on: ubuntu-latest
    if: github.event.ref_type == 'branch' && startsWith(github.event.ref, 'refs/heads/feature/')
    defaults:
      run:
        shell: bash
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.13.1'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Prepare backend (S3 + DynamoDB)
        run: make -C terraform tf-backend

      - name: Terraform Init
        run: terraform init

      - name: Terraform Destroy
        run: terraform destroy -auto-approve -input=false
